// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: bags.sql

package db

import (
	"context"
)

const createBag = `-- name: CreateBag :one
INSERT INTO bags (
    barcode,
    bag_status,
    delivery_id
) VALUES (
    $1,$2,$3
) RETURNING barcode, bag_status, delivery_id
`

type CreateBagParams struct {
	Barcode    string     `json:"barcode"`
	BagStatus  BagsStatus `json:"bag_status"`
	DeliveryID int32      `json:"delivery_id"`
}

func (q *Queries) CreateBag(ctx context.Context, arg CreateBagParams) (Bag, error) {
	row := q.db.QueryRowContext(ctx, createBag, arg.Barcode, arg.BagStatus, arg.DeliveryID)
	var i Bag
	err := row.Scan(&i.Barcode, &i.BagStatus, &i.DeliveryID)
	return i, err
}

const deleteBag = `-- name: DeleteBag :exec
DELETE FROM bags WHERE barcode = $1
`

func (q *Queries) DeleteBag(ctx context.Context, barcode string) error {
	_, err := q.db.ExecContext(ctx, deleteBag, barcode)
	return err
}

const getBag = `-- name: GetBag :one
SELECT barcode, bag_status, delivery_id FROM bags
WHERE barcode = $1  LIMIT 1
`

func (q *Queries) GetBag(ctx context.Context, barcode string) (Bag, error) {
	row := q.db.QueryRowContext(ctx, getBag, barcode)
	var i Bag
	err := row.Scan(&i.Barcode, &i.BagStatus, &i.DeliveryID)
	return i, err
}

const listBags = `-- name: ListBags :many
SELECT barcode, bag_status, delivery_id FROM bags
ORDER BY barcode
`

func (q *Queries) ListBags(ctx context.Context) ([]Bag, error) {
	rows, err := q.db.QueryContext(ctx, listBags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bag
	for rows.Next() {
		var i Bag
		if err := rows.Scan(&i.Barcode, &i.BagStatus, &i.DeliveryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBag = `-- name: UpdateBag :one
UPDATE bags SET bag_status = $2
WHERE barcode = $1
RETURNING barcode, bag_status, delivery_id
`

type UpdateBagParams struct {
	Barcode   string     `json:"barcode"`
	BagStatus BagsStatus `json:"bag_status"`
}

func (q *Queries) UpdateBag(ctx context.Context, arg UpdateBagParams) (Bag, error) {
	row := q.db.QueryRowContext(ctx, updateBag, arg.Barcode, arg.BagStatus)
	var i Bag
	err := row.Scan(&i.Barcode, &i.BagStatus, &i.DeliveryID)
	return i, err
}
