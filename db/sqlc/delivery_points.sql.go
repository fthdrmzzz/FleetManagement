// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: delivery_points.sql

package db

import (
	"context"
)

const createDeliveryPoint = `-- name: CreateDeliveryPoint :one
INSERT INTO delivery_points (
    id,
    name
) VALUES (
    $1,
    $2
) RETURNING id, name
`

type CreateDeliveryPointParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateDeliveryPoint(ctx context.Context, arg CreateDeliveryPointParams) (DeliveryPoint, error) {
	row := q.db.QueryRowContext(ctx, createDeliveryPoint, arg.ID, arg.Name)
	var i DeliveryPoint
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteDeliveryPoint = `-- name: DeleteDeliveryPoint :exec
DELETE FROM delivery_points WHERE id = $1
`

func (q *Queries) DeleteDeliveryPoint(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteDeliveryPoint, id)
	return err
}

const getDeliveryPoint = `-- name: GetDeliveryPoint :one
SELECT id, name FROM delivery_points
WHERE id = $1  LIMIT 1
`

func (q *Queries) GetDeliveryPoint(ctx context.Context, id int32) (DeliveryPoint, error) {
	row := q.db.QueryRowContext(ctx, getDeliveryPoint, id)
	var i DeliveryPoint
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
