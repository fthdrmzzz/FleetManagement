// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: packages.sql

package db

import (
	"context"
)

const createPackage = `-- name: CreatePackage :one
INSERT INTO packages (
    barcode,
    package_status,
    package_weight,
    delivery_id
) VALUES (
    $1,$2,$3,$4
) RETURNING barcode, package_status, package_weight, delivery_id
`

type CreatePackageParams struct {
	Barcode       string         `json:"barcode"`
	PackageStatus PackagesStatus `json:"package_status"`
	PackageWeight int32          `json:"package_weight"`
	DeliveryID    int32          `json:"delivery_id"`
}

func (q *Queries) CreatePackage(ctx context.Context, arg CreatePackageParams) (Package, error) {
	row := q.db.QueryRowContext(ctx, createPackage,
		arg.Barcode,
		arg.PackageStatus,
		arg.PackageWeight,
		arg.DeliveryID,
	)
	var i Package
	err := row.Scan(
		&i.Barcode,
		&i.PackageStatus,
		&i.PackageWeight,
		&i.DeliveryID,
	)
	return i, err
}

const deletePackage = `-- name: DeletePackage :exec
DELETE FROM packages WHERE barcode = $1
`

func (q *Queries) DeletePackage(ctx context.Context, barcode string) error {
	_, err := q.db.ExecContext(ctx, deletePackage, barcode)
	return err
}

const getPackage = `-- name: GetPackage :one
SELECT barcode, package_status, package_weight, delivery_id FROM packages
WHERE barcode = $1  LIMIT 1
`

func (q *Queries) GetPackage(ctx context.Context, barcode string) (Package, error) {
	row := q.db.QueryRowContext(ctx, getPackage, barcode)
	var i Package
	err := row.Scan(
		&i.Barcode,
		&i.PackageStatus,
		&i.PackageWeight,
		&i.DeliveryID,
	)
	return i, err
}

const listPackages = `-- name: ListPackages :many
SELECT barcode, package_status, package_weight, delivery_id FROM packages
ORDER BY barcode
`

func (q *Queries) ListPackages(ctx context.Context) ([]Package, error) {
	rows, err := q.db.QueryContext(ctx, listPackages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Package
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.Barcode,
			&i.PackageStatus,
			&i.PackageWeight,
			&i.DeliveryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackage = `-- name: UpdatePackage :one
UPDATE packages SET package_status = $2
WHERE barcode = $1
RETURNING barcode, package_status, package_weight, delivery_id
`

type UpdatePackageParams struct {
	Barcode       string         `json:"barcode"`
	PackageStatus PackagesStatus `json:"package_status"`
}

func (q *Queries) UpdatePackage(ctx context.Context, arg UpdatePackageParams) (Package, error) {
	row := q.db.QueryRowContext(ctx, updatePackage, arg.Barcode, arg.PackageStatus)
	var i Package
	err := row.Scan(
		&i.Barcode,
		&i.PackageStatus,
		&i.PackageWeight,
		&i.DeliveryID,
	)
	return i, err
}
