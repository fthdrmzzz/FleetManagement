// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: vehicles.sql

package db

import (
	"context"
)

const createVehicle = `-- name: CreateVehicle :one
INSERT INTO vehicles (
    plate
) VALUES (
    $1
) RETURNING plate
`

func (q *Queries) CreateVehicle(ctx context.Context, plate string) (string, error) {
	row := q.db.QueryRowContext(ctx, createVehicle, plate)
	err := row.Scan(&plate)
	return plate, err
}

const deleteVehicle = `-- name: DeleteVehicle :exec
DELETE FROM vehicles WHERE plate = $1
`

func (q *Queries) DeleteVehicle(ctx context.Context, plate string) error {
	_, err := q.db.ExecContext(ctx, deleteVehicle, plate)
	return err
}

const getVehicle = `-- name: GetVehicle :one
SELECT plate FROM vehicles
WHERE plate = $1  LIMIT 1
`

func (q *Queries) GetVehicle(ctx context.Context, plate string) (string, error) {
	row := q.db.QueryRowContext(ctx, getVehicle, plate)
	err := row.Scan(&plate)
	return plate, err
}

const listVehicles = `-- name: ListVehicles :many
SELECT plate FROM vehicles
ORDER BY plate
`

func (q *Queries) ListVehicles(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listVehicles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var plate string
		if err := rows.Scan(&plate); err != nil {
			return nil, err
		}
		items = append(items, plate)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
